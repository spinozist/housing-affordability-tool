{"ast":null,"code":"import _slicedToArray from \"/Users/erikwoodworth/Coding/ARC/affordability-by-income/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/erikwoodworth/Coding/ARC/affordability-by-income/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Slider } from 'react-semantic-ui-range';\nimport numeral from 'numeral';\nimport AffordabilityMap from './components/AffordabilityMap';\nimport ColorRamp from './components/ColorRamp';\nimport API from './utils/API.js';\n\nvar saleValueByTract = require('./data/median-sale-price.json');\n\nvar App = function App() {\n  var _useState = useState(50000),\n      _useState2 = _slicedToArray(_useState, 2),\n      income = _useState2[0],\n      setIncome = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      tractData = _useState4[0],\n      setTractData = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      affordablePayment = _useState6[0],\n      setAffordablePayment = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      salePrice = _useState8[0],\n      setSalePrice = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      percentOfIncome = _useState10[0],\n      setPercentOfIncome = _useState10[1];\n\n  var _useState11 = useState(),\n      _useState12 = _slicedToArray(_useState11, 2),\n      affordableLoan = _useState12[0],\n      setAffordableLoan = _useState12[1];\n\n  var _useState13 = useState(),\n      _useState14 = _slicedToArray(_useState13, 2),\n      tractLayer = _useState14[0],\n      setTractLayer = _useState14[1];\n\n  var padding = 10;\n  var sliderSettings = {\n    // start: 50000,\n    min: 20000,\n    max: 200000,\n    step: 1000,\n    onChange: function onChange(value) {\n      return setIncome(value);\n    } // console.log(income);\n\n  };\n\n  var affordableLoanCalc = function affordableLoanCalc(income, year, apr) {\n    var percentOfIncome = .2;\n    var affordablePayment = income * percentOfIncome / 12;\n    var n = year * 12;\n    var c = apr / 12;\n    var paymentDivisor = c * Math.pow(c + 1, n) / (Math.pow(c + 1, n) - 1);\n    var affordableLoan = parseFloat(affordablePayment) / parseFloat(paymentDivisor);\n    setAffordablePayment(affordablePayment);\n    setAffordableLoan(affordableLoan);\n  };\n\n  var percentOfIncomeCalc = function percentOfIncomeCalc(income, salePrice, year, apr) {\n    var monthlyIncome = income / 12;\n    var n = year * 12;\n    var c = apr / 12;\n    var paymentMultiplier = c * Math.pow(c + 1, n) / (Math.pow(c + 1, n) - 1);\n    var monthlyPayment = salePrice * paymentMultiplier; // console.log(salePrice)\n\n    var percentOfIncome = monthlyPayment / monthlyIncome;\n    return percentOfIncome * 100;\n  };\n\n  var handleTractData = function handleTractData(income) {\n    // const income = event.target.value\n    var modTractData = saleValueByTract ? saleValueByTract.map(function (tract) {\n      return {\n        'Census Tract': tract['Census Tract'],\n        'Median Sale Price': tract['Median Sale Price'],\n        // 'Income' : income,\n        'Percent of Income': percentOfIncomeCalc(income, parseFloat(tract['Median Sale Price']), 30, .045)\n      };\n    }) : null;\n    setTractData(modTractData);\n  };\n\n  var getGeoJSON = function getGeoJSON() {\n    var url = \"https://opendata.arcgis.com/datasets/798a9b46a48342e5a07cd9758623b839_157.geojson?where=PlanningRegion%20%3D%20'Atlanta%20Regional%20Commission'&outFields=GEOID\";\n    API.getData(url).then(function (res) {\n      return setTractLayer(res.data);\n    }).catch(function (err) {\n      return console.error(err);\n    });\n  };\n\n  useEffect(function () {\n    return getGeoJSON();\n  }, []);\n  useEffect(function () {\n    return handleTractData(income);\n  }, [income]);\n  return React.createElement(\"div\", {\n    style: {\n      padding: padding\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Housing Affordability with an income of \", numeral(income).format('$0,0')), React.createElement(Slider, {\n    value: income,\n    settings: sliderSettings,\n    color: \"red\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }), tractData ? React.createElement(\"div\", {\n    style: {\n      float: 'left',\n      width: '0%',\n      height: '65vh'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(AffordabilityMap, {\n    data: tractData,\n    geojson: tractLayer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })) : null, tractData ? React.createElement(ColorRamp, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }) : null);\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/erikwoodworth/Coding/ARC/affordability-by-income/src/App.js"],"names":["React","useState","useEffect","Slider","numeral","AffordabilityMap","ColorRamp","API","saleValueByTract","require","App","income","setIncome","tractData","setTractData","affordablePayment","setAffordablePayment","salePrice","setSalePrice","percentOfIncome","setPercentOfIncome","affordableLoan","setAffordableLoan","tractLayer","setTractLayer","padding","sliderSettings","min","max","step","onChange","value","affordableLoanCalc","year","apr","n","c","paymentDivisor","Math","pow","parseFloat","percentOfIncomeCalc","monthlyIncome","paymentMultiplier","monthlyPayment","handleTractData","modTractData","map","tract","getGeoJSON","url","getData","then","res","data","catch","err","console","error","format","float","width","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Slider } from 'react-semantic-ui-range';\nimport numeral from 'numeral';\nimport AffordabilityMap from './components/AffordabilityMap';\nimport ColorRamp from './components/ColorRamp'\nimport API from './utils/API.js';\n\n\nconst saleValueByTract = require('./data/median-sale-price.json');\n\n\n\nconst App = () => {\n    const [income, setIncome] = useState(50000);\n    const [tractData, setTractData] = useState();\n    const [affordablePayment, setAffordablePayment] = useState();\n    const [salePrice, setSalePrice] = useState();\n    const [percentOfIncome , setPercentOfIncome] = useState();\n    const [affordableLoan, setAffordableLoan] = useState();\n    const [tractLayer, setTractLayer] = useState();\n    const padding = 10;\n\n    const sliderSettings = {\n        // start: 50000,\n        min: 20000,\n        max: 200000,\n        step: 1000,\n        onChange: value => setIncome(value)\n    }\n    // console.log(income);\n\n    const affordableLoanCalc = (income, year, apr) => {\n        const percentOfIncome = .2;\n        const affordablePayment = (income * percentOfIncome)/12;\n        const n = year * 12;\n        const c = apr/12;\n        const paymentDivisor = (c * Math.pow((c + 1),n))/(Math.pow((c + 1), n) - 1);\n        const affordableLoan = parseFloat(affordablePayment) / parseFloat(paymentDivisor);    \n\n        setAffordablePayment(affordablePayment);\n        setAffordableLoan(affordableLoan);\n    }\n\n    const percentOfIncomeCalc = (income, salePrice, year, apr) => {\n        const monthlyIncome = income / 12;\n        const n = year * 12;\n        const c = apr / 12;\n        const paymentMultiplier = (c * Math.pow((c + 1),n))/(Math.pow((c + 1), n) - 1);\n        const monthlyPayment = salePrice * paymentMultiplier;\n\n        // console.log(salePrice)\n\n\n        const percentOfIncome = monthlyPayment / monthlyIncome;\n\n        return percentOfIncome * 100;\n    }\n\n    const handleTractData = income => {   \n        // const income = event.target.value\n        const modTractData = saleValueByTract ? \n            saleValueByTract.map(tract => ({\n                'Census Tract' : tract['Census Tract'],\n                'Median Sale Price' : tract['Median Sale Price'],\n                // 'Income' : income,\n                'Percent of Income' :  percentOfIncomeCalc(income, parseFloat(tract['Median Sale Price']), 30, .045)\n            })) : null\n        setTractData(modTractData);\n    }\n\n    const getGeoJSON = () => {\n\n        const url = `https://opendata.arcgis.com/datasets/798a9b46a48342e5a07cd9758623b839_157.geojson?where=PlanningRegion%20%3D%20'Atlanta%20Regional%20Commission'&outFields=GEOID`\n\n        API.getData(url)\n            .then(res => setTractLayer(res.data))\n            .catch(err => console.error(err))\n    }\n\n    useEffect(() => getGeoJSON(), []);\n\n    useEffect(() => handleTractData(income), [income])\n\n    return(\n        <div style={{\n            padding: padding\n        }}>\n            <h2>Housing Affordability with an income of {numeral(income).format('$0,0')}</h2>\n            <Slider value={income} settings={sliderSettings} color='red'/>\n            {/* <input \n                name='income'\n                placeholder='Enter Income'\n                value={income}\n                onChange={event => {\n                    setIncome(numeral(event.target.value).format('$0,0'))\n                    // setPercentOfIncome();\n                    // handleTractData(event)\n                }}\n            /> */}\n            {/* <input\n                style={{\n                    margin: 10\n                }} \n                name='home-sale-price'\n                placeholder='Enter Sale Price'\n                value={salePrice}\n                onChange={event => {\n                    setSalePrice(numeral(event.target.value).format('$0,0'))\n                    setPercentOfIncome();\n                }}\n\n            />\n            <button\n                // onClick={() => affordableLoanCalc(income.value(), 30, .045)} \n                onClick={() => {\n                    setPercentOfIncome(percentOfIncomeCalc(numeral(income).value(), numeral(salePrice).value(), 30, .045));\n                    handleTractData();\n                }}\n                style={{\n                    margin: 10\n                }}\n            >\n                Calculate Percent of Income to Afford\n            </button> */}\n            {/* <h3>{percentOfIncome ? `With an income of ${income}, the mortgage payment for a house costing ${salePrice} would be ${percentOfIncome.toFixed(1)}% of your income each month.` : null }</h3> */}\n            {/* <h3> {tractData ?\n                'Below is a map of affordability across the region at that income...' : null}</h3> */}\n            {/* <h3>Affordable Monthly Payment: ${affordablePayment}</h3> */}\n            {/* <h3>Affordable Loan: ${affordableLoan}</h3> */}\n            {/* {tractData ? tractData.map(tract => <p>{tract['Census Tract'] + \": \" + tract['Percent of Income']}</p>) : null} */}\n            {tractData ? <div style={{ float: 'left', width: '0%', height: '65vh'}}>  \n                <AffordabilityMap data={tractData} geojson={tractLayer} />                              \n            </div> : null }\n            {tractData ? <ColorRamp /> : null }\n        </div>\n    )\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}