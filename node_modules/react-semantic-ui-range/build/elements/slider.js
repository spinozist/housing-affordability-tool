"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _rangeCss = require("./range.css.js");

var _rangeCss2 = _interopRequireDefault(_rangeCss);

var _reactDom = require("react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Slider = function (_Component) {
  _inherits(Slider, _Component);

  function Slider(props) {
    _classCallCheck(this, Slider);

    var _this = _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this, props));

    var value = _this.props.value ? _this.props.value : props.multiple ? [].concat(_toConsumableArray(props.settings.start)) : props.settings.start;
    _this.state = {
      value: value,
      position: props.multiple ? [] : 0,
      numberOfThumbs: props.multiple ? value.length : 1,
      offset: 10,
      precision: 0,
      mouseDown: false
    };
    _this.determinePosition = _this.determinePosition.bind(_this);
    _this.rangeMouseUp = _this.rangeMouseUp.bind(_this);
    return _this;
  }

  _createClass(Slider, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.determinePrecision();
      var value = this.props.value ? this.props.value : this.state.value;
      this.setValuesAndPositions(value, false);
      window.addEventListener("mouseup", this.rangeMouseUp);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.value && nextProps.value !== this.state.value) {
        if (this.props.multiple) {
          var different = this.isDifferentArrays(nextProps.value, this.state.value);
          if (different) {
            this.setValuesAndPositions(nextProps.value, true);
          }
        } else {
          this.setValuesAndPositions(nextProps.value, true);
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.inner = undefined;
      this.innerLeft = undefined;
      this.innerRight = undefined;
      window.removeEventListener("mouseup", this.rangeMouseUp);
    }
  }, {
    key: "setValuesAndPositions",
    value: function setValuesAndPositions(value, triggeredByUser) {
      var _this2 = this;

      if (this.props.multiple) {
        var positions = [].concat(_toConsumableArray(this.state.position));
        value.forEach(function (val, i) {
          _this2.setValue(val, triggeredByUser, i);
          positions[i] = _this2.determinePosition(val);
        });
        this.setState({
          position: positions
        });
      } else {
        this.setValue(value, triggeredByUser);
        this.setState({
          position: this.determinePosition(value)
        });
      }
    }
  }, {
    key: "isDifferentArrays",
    value: function isDifferentArrays(a, b) {
      var different = false;
      a.some(function (val, i) {
        if (val !== b[i]) {
          different = true;
          return true;
        }
      });
      return different;
    }
  }, {
    key: "determinePosition",
    value: function determinePosition(value) {
      var trackLeft = _reactDom2.default.findDOMNode(this.track).getBoundingClientRect().left;
      var innerLeft = _reactDom2.default.findDOMNode(this.inner).getBoundingClientRect().left;
      var ratio = (value - this.props.settings.min) / (this.props.settings.max - this.props.settings.min);
      var position = Math.round(ratio * this.inner.offsetWidth) + trackLeft - innerLeft - this.state.offset;
      return position;
    }
  }, {
    key: "determinePrecision",
    value: function determinePrecision() {
      var split = String(this.props.settings.step).split(".");
      var decimalPlaces = void 0;
      if (split.length === 2) {
        decimalPlaces = split[1].length;
      } else {
        decimalPlaces = 0;
      }
      this.setState({
        precision: Math.pow(10, decimalPlaces)
      });
    }
  }, {
    key: "determineValue",
    value: function determineValue(startPos, endPos, currentPos) {
      var ratio = (currentPos - startPos) / (endPos - startPos);
      var range = this.props.settings.max - this.props.settings.min;
      var difference = Math.round(ratio * range / this.props.settings.step) * this.props.settings.step;
      // Use precision to avoid ugly Javascript floating point rounding issues
      // (like 35 * .01 = 0.35000000000000003)
      difference = Math.round(difference * this.state.precision) / this.state.precision;
      return difference + this.props.settings.min;
    }
  }, {
    key: "determineThumb",
    value: function determineThumb(position, value) {
      if (!this.props.multiple) {
        return 0;
      }
      if (position <= this.state.position[0]) {
        return 0;
      }
      if (position >= this.state.position[this.state.numberOfThumbs - 1]) {
        return this.state.numberOfThumbs - 1;
      }
      var index = 0;

      for (var i = 0; i < this.state.numberOfThumbs - 1; i++) {
        if (position >= this.state.position[i] && position < this.state.position[i + 1]) {
          var distanceToSecond = Math.abs(position - this.state.position[i + 1]);
          var distanceToFirst = Math.abs(position - this.state.position[i]);
          if (distanceToSecond <= distanceToFirst) {
            return i + 1;
          } else {
            return i;
          }
        }
      }
      return index;
    }
  }, {
    key: "setValue",
    value: function setValue(value, triggeredByUser, thumbIndex) {
      if (typeof triggeredByUser === "undefined") {
        triggeredByUser = true;
      }
      var currentValue = this.props.multiple ? this.state.value[thumbIndex] : this.state.value;
      if (currentValue !== value) {
        var newValue = [];
        if (this.props.multiple) {
          newValue = [].concat(_toConsumableArray(this.state.value));
          newValue[thumbIndex] = value;
          this.setState({
            value: newValue
          });
        } else {
          newValue = value;
          this.setState({
            value: value
          });
        }
        if (this.props.settings.onChange) {
          this.props.settings.onChange(newValue, {
            triggeredByUser: triggeredByUser
          });
        }
      }
    }
  }, {
    key: "setValuePosition",
    value: function setValuePosition(value, triggeredByUser, thumbIndex) {
      if (this.props.multiple) {
        var positions = [].concat(_toConsumableArray(this.state.position));
        positions[thumbIndex] = this.determinePosition(value);
        this.setValue(value, triggeredByUser, thumbIndex);
        this.setState({
          position: positions
        });
      } else {
        this.setValue(value, triggeredByUser);
        this.setState({
          position: this.determinePosition(value)
        });
      }
    }
  }, {
    key: "setPosition",
    value: function setPosition(position, thumbIndex) {
      if (this.props.multiple) {
        var newPosition = [].concat(_toConsumableArray(this.state.position));
        newPosition[thumbIndex] = position;
        this.setState({
          position: newPosition
        });
      } else {
        this.setState({
          position: position
        });
      }
    }
  }, {
    key: "rangeMouseDown",
    value: function rangeMouseDown(isTouch, e) {
      e.stopPropagation();
      if (!this.props.disabled) {
        if (!isTouch) {
          e.preventDefault();
        }

        this.setState({
          mouseDown: true
        });
        var innerBoundingClientRect = _reactDom2.default.findDOMNode(this.inner).getBoundingClientRect();
        this.innerLeft = innerBoundingClientRect.left;
        this.innerRight = this.innerLeft + this.inner.offsetWidth;
        this.rangeMouse(isTouch, e);
      }
    }
  }, {
    key: "rangeMouse",
    value: function rangeMouse(isTouch, e) {
      var pageX = void 0;
      var event = isTouch ? e.touches[0] : e;
      if (event.pageX) {
        pageX = event.pageX;
      } else {
        console.log("PageX undefined");
      }
      var value = this.determineValue(this.innerLeft, this.innerRight, pageX);
      if (pageX >= this.innerLeft && pageX <= this.innerRight) {
        if (value >= this.props.settings.min && value <= this.props.settings.max) {
          var position = pageX - this.innerLeft - this.state.offset;
          var thumbIndex = this.props.multiple ? this.determineThumb(position) : undefined;
          if (this.props.discrete) {
            this.setValuePosition(value, false, thumbIndex);
          } else {
            this.setPosition(position, thumbIndex);
            this.setValue(value, undefined, thumbIndex);
          }
        }
      }
    }
  }, {
    key: "rangeMouseMove",
    value: function rangeMouseMove(isTouch, e) {
      e.stopPropagation();
      if (!isTouch) {
        e.preventDefault();
      }
      if (this.state.mouseDown) {
        this.rangeMouse(isTouch, e);
      }
    }
  }, {
    key: "rangeMouseUp",
    value: function rangeMouseUp() {
      this.setState({
        mouseDown: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(
        "div",
        null,
        _react2.default.createElement(
          "div",
          {
            onMouseDown: function onMouseDown(event) {
              return _this3.rangeMouseDown(false, event);
            },
            onMouseMove: function onMouseMove(event) {
              return _this3.rangeMouseMove(false, event);
            },
            onMouseUp: function onMouseUp(event) {
              return _this3.rangeMouseUp(false, event);
            },
            onTouchEnd: function onTouchEnd(event) {
              return _this3.rangeMouseUp(true, event);
            },
            onTouchMove: function onTouchMove(event) {
              return _this3.rangeMouseMove(true, event);
            },
            onTouchStart: function onTouchStart(event) {
              return _this3.rangeMouseDown(true, event);
            },
            style: _extends({}, _rangeCss2.default.range, this.props.disabled ? _rangeCss2.default.disabled : {}, this.props.style ? this.props.style : {})
          },
          _react2.default.createElement(
            "div",
            {
              className: "semantic_ui_range_inner",
              ref: function ref(inner) {
                _this3.inner = inner;
              },
              style: _extends({}, _rangeCss2.default.inner, this.props.style ? this.props.style.inner ? this.props.style.inner : {} : {})
            },
            _react2.default.createElement("div", {
              ref: function ref(track) {
                _this3.track = track;
              },
              style: _extends({}, _rangeCss2.default.track, this.props.inverted ? _rangeCss2.default.invertedTrack : {}, this.props.style ? this.props.style.track ? this.props.style.track : {} : {})
            }),
            _react2.default.createElement("div", {
              ref: function ref(trackFill) {
                _this3.trackFill = trackFill;
              },
              style: _extends({}, _rangeCss2.default.trackFill, this.props.inverted ? _rangeCss2.default.invertedTrackFill : {}, _rangeCss2.default[this.props.inverted ? "inverted-" + this.props.color : this.props.color], this.props.style ? this.props.style.trackFill ? this.props.style.trackFill : {} : {}, this.props.disabled ? _rangeCss2.default.disabledTrackFill : {}, this.props.style ? this.props.style.disabledTrackFill ? this.props.style.disabledTrackFill : {} : {}, { width: this.state.position + this.state.offset + "px" }, this.props.multiple && this.state.position.length > 0 ? {
                left: this.state.position[0],
                width: this.state.position[this.state.numberOfThumbs - 1] - this.state.position[0]
              } : {})
            }),
            this.props.multiple ? this.state.position.map(function (pos, i) {
              return _react2.default.createElement("div", {
                key: i,
                style: _extends({}, _rangeCss2.default.thumb, _this3.props.style ? _this3.props.style.thumb ? _this3.props.style.thumb : {} : {}, { left: pos + "px" })
              });
            }) : _react2.default.createElement("div", {
              style: _extends({}, _rangeCss2.default.thumb, this.props.style ? this.props.style.thumb ? this.props.style.thumb : {} : {}, { left: this.state.position + "px" })
            })
          )
        )
      );
    }
  }]);

  return Slider;
}(_react.Component);

exports.default = Slider;


Slider.defaultProps = {
  color: "red",
  settings: {
    min: 0,
    max: 10,
    step: 1,
    start: 0
  }
};

Slider.propTypes = {
  color: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  discrete: _propTypes2.default.bool,
  inverted: _propTypes2.default.bool,
  multiple: _propTypes2.default.bool,
  settings: _propTypes2.default.shape({
    min: _propTypes2.default.number,
    max: _propTypes2.default.number,
    step: _propTypes2.default.number,
    start: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.number)]),
    onChange: _propTypes2.default.func
  })
};